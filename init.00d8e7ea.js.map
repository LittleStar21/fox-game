{"version":3,"sources":["constants.js","ui.js","gameState.js","buttons.js","init.js"],"names":["TICK_RATE","RAIN_CHANCE","ICONS","SCENES","DAY_LENGTH","NIGHT_LENGTH","getNextHungryTime","clock","Math","floor","random","getNextDieTime","getNextPoopTime","modifyFox","state","document","querySelector","className","modifyScene","togglePoopBag","isShow","classList","toggle","writeModal","text","innerHTML","gameState","current","wakeTime","sleepTime","hungryTime","dieTime","poopTime","timeToStartCelebrating","timeToFinishCelebrating","tick","wake","sleep","getHungry","die","poop","startCelebrating","finishCelebrating","handleUserAction","icon","changeWeather","cleanUpPoop","feed","startGame","modalText","i","setTimeout","scene","determineFoxState","clearAllTimers","length","bind","initButtons","toggleHighlighted","selectedIcon","addEventListener","target","contains","init","nextTickTime","Date","now","requestAnimationFrame","nextAnimationFrame","nowTime"],"mappings":"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","file":"init.00d8e7ea.js","sourceRoot":"../src","sourcesContent":["export const TICK_RATE = 3000;\nexport const RAIN_CHANCE = 0.2;\nexport const ICONS = [\"fish\", \"poop\", \"weather\"];\nexport const SCENES = [\"day\", \"rain\"];\nexport const DAY_LENGTH = 60;\nexport const NIGHT_LENGTH = 4;\n\nexport const getNextHungryTime = (clock) =>\n  Math.floor(Math.random() * 3) + 5 + clock;\n\nexport const getNextDieTime = (clock) =>\n  Math.floor(Math.random() * 2) + 3 + clock;\n\nexport const getNextPoopTime = (clock) =>\n  Math.floor(Math.random() * 3) + 4 + clock;\n","export const modifyFox = (state) => {\n  document.querySelector(\".fox\").className = `fox fox-${state}`;\n};\n\nexport const modifyScene = (state) => {\n  document.querySelector(\".game\").className = `game ${state}`;\n};\n\nexport const togglePoopBag = (isShow) => {\n  document.querySelector(\".poop-bag\").classList.toggle(\"hidden\", !isShow);\n};\n\nexport const writeModal = (text = \"\") => {\n  document.querySelector(\n    \".modal\"\n  ).innerHTML = `<div class=\"modal-inner\">${text}</div>`;\n};\n","import {\n  RAIN_CHANCE,\n  SCENES,\n  DAY_LENGTH,\n  NIGHT_LENGTH,\n  getNextHungryTime,\n  getNextDieTime,\n  getNextPoopTime,\n} from \"./constants\";\n\nimport { modifyFox, modifyScene, togglePoopBag, writeModal } from \"./ui\";\n\nconst gameState = {\n  current: \"INIT\",\n  clock: 1,\n  wakeTime: -1,\n  sleepTime: -1,\n  hungryTime: -1,\n  dieTime: -1,\n  poopTime: -1,\n  timeToStartCelebrating: -1,\n  timeToFinishCelebrating: -1,\n\n  tick() {\n    this.clock++;\n\n    switch (this.clock) {\n      case this.wakeTime:\n        this.wake();\n        break;\n      case this.sleepTime:\n        this.sleep();\n        break;\n      case this.hungryTime:\n        this.getHungry();\n        break;\n      case this.dieTime:\n        this.die();\n        break;\n      case this.poopTime:\n        this.poop();\n        break;\n      case this.timeToStartCelebrating:\n        this.startCelebrating();\n        break;\n      case this.timeToFinishCelebrating:\n        this.finishCelebrating();\n        break;\n    }\n  },\n\n  handleUserAction(icon) {\n    if (\n      this.current === \"SLEEP\" ||\n      this.current === \"FEEDING\" ||\n      this.current === \"CELEBRATING\" ||\n      this.current === \"HATCHING\"\n    ) {\n      return;\n    }\n\n    if (this.current === \"INIT\" || this.current === \"DEAD\") {\n      this.startGame();\n      return;\n    }\n\n    switch (icon) {\n      case \"weather\":\n        this.changeWeather();\n        break;\n      case \"poop\":\n        this.cleanUpPoop();\n        break;\n      case \"fish\":\n        this.feed();\n        break;\n    }\n  },\n\n  startGame() {\n    let modalText = \"The fox is hatching\";\n    for (let i = 0; i < 4; i++) {\n      setTimeout(() => {\n        writeModal(modalText);\n        modalText += \".\";\n      }, i * 1000);\n    }\n\n    this.current = \"HATCHING\";\n    this.wakeTime = this.clock + 3; // 3 game ticks\n\n    modifyFox(\"egg\");\n    modifyScene(\"day\");\n  },\n\n  wake() {\n    writeModal();\n    this.current = \"IDLING\";\n    this.wakeTime = -1;\n\n    this.scene = Math.random() > RAIN_CHANCE ? 0 : 1;\n    modifyScene(SCENES[this.scene]);\n\n    this.sleepTime = this.clock + DAY_LENGTH;\n    this.hungryTime = getNextHungryTime(this.clock);\n\n    this.determineFoxState();\n  },\n\n  sleep() {\n    this.state = \"SLEEP\";\n    modifyFox(\"sleep\");\n    modifyScene(\"night\");\n    this.clearAllTimers();\n    this.wakeTime = this.clock + NIGHT_LENGTH;\n  },\n\n  getHungry() {\n    writeModal(\"The fox is hungry\");\n    this.current = \"HUNGRY\";\n    this.dieTime = getNextDieTime(this.clock);\n    this.hungryTime = -1;\n\n    modifyFox(\"hungry\");\n  },\n\n  die() {\n    writeModal(\n      \"The fox died :( </br> Press the middle button to restart the game\"\n    );\n    this.current = \"DEAD\";\n    modifyFox(\"dead\");\n    modifyScene(\"dead\");\n    this.clearAllTimers();\n  },\n\n  clearAllTimers() {\n    this.wakeTime = -1;\n    this.sleepTime = -1;\n    this.hungryTime = -1;\n    this.poopTime = -1;\n    this.dieTime = -1;\n    this.timeToStartCelebrating = -1;\n    this.timeToFinishCelebrating = -1;\n  },\n\n  startCelebrating() {\n    this.current = \"CELEBRATING\";\n    modifyFox(\"celebrate\");\n    this.timeToStartCelebrating = -1;\n    this.timeToFinishCelebrating = this.clock + 2;\n  },\n\n  finishCelebrating() {\n    this.current = \"IDLING\";\n    this.timeToFinishCelebrating = -1;\n    this.determineFoxState();\n    togglePoopBag(false);\n  },\n\n  determineFoxState() {\n    if (this.current === \"IDLING\") {\n      if (SCENES[this.scene] === \"rain\") {\n        modifyFox(\"rain\");\n      } else {\n        modifyFox(\"idling\");\n      }\n    }\n  },\n\n  poop() {\n    writeModal(\"The fox pooped\");\n    this.current = \"POOPING\";\n    this.poopTime = -1;\n    this.dieTime = getNextDieTime(this.clock);\n    modifyFox(\"pooping\");\n  },\n\n  changeWeather() {\n    this.scene = (this.scene + 1) % SCENES.length;\n    modifyScene(SCENES[this.scene]);\n    this.determineFoxState();\n  },\n\n  cleanUpPoop() {\n    if (this.current !== \"POOPING\") return;\n\n    this.dieTime = -1;\n    togglePoopBag(true);\n    this.startCelebrating();\n    this.hungryTime = getNextHungryTime(this.clock);\n    writeModal();\n  },\n\n  feed() {\n    if (this.current !== \"HUNGRY\") return;\n\n    this.current = \"FEEDING\";\n    this.dieTime = -1;\n    this.poopTime = getNextPoopTime(this.clock);\n    modifyFox(\"eating\");\n    this.timeToStartCelebrating = this.clock + 2;\n    writeModal();\n  },\n};\n\nexport const handleUserAction = gameState.handleUserAction.bind(gameState);\nexport default gameState;\n","import { ICONS } from \"./constants\";\n\nconst toggleHighlighted = (icon, isShow) => {\n  document\n    .querySelector(`.${ICONS[icon]}-icon`)\n    .classList.toggle(\"highlighted\", isShow);\n};\n\nconst initButtons = (handleUserAction) => {\n  let selectedIcon = 0;\n\n  const buttonClick = ({ target }) => {\n    if (target.classList.contains(\"left-btn\")) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (selectedIcon + 2) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else if (target.classList.contains(\"right-btn\")) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (selectedIcon + 1) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else {\n      handleUserAction(ICONS[selectedIcon]);\n    }\n  };\n\n  document.querySelector(\".buttons\").addEventListener(\"click\", buttonClick);\n};\n\nexport default initButtons;\n","import gameState, { handleUserAction } from \"./gameState\";\nimport { TICK_RATE } from \"./constants\";\nimport initButtons from \"./buttons\";\n\nconst init = () => {\n  initButtons(handleUserAction);\n\n  let nextTickTime = Date.now();\n\n  const nextAnimationFrame = () => {\n    const nowTime = Date.now();\n\n    if (nextTickTime <= nowTime) {\n      gameState.tick();\n      nextTickTime = nowTime + TICK_RATE;\n    }\n\n    requestAnimationFrame(nextAnimationFrame);\n  };\n\n  requestAnimationFrame(nextAnimationFrame);\n};\n\ninit();\n"]}